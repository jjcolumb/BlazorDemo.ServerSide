@inject DemoConfiguration DemoConfiguration
@inject DemoThemeService Themes
@implements IDisposable
@implements IDemoThemeChangeRequestDispatcher

<link rel="stylesheet" href="_content/BlazorDemo/css/scroll-view.css">
<DynamicStylesheetCompositeLink Urls="@CreateLinkUrls()" OnLinksLoaded="@ThemeStylesheet_LoadAsync"/>
<link rel="stylesheet" href="_content/BlazorDemo/css/dx-demo.css">
<link rel="stylesheet" href="_content/BlazorDemo/css/dx-demo-pages.css">

@if(DemoConfiguration.IsServerSide) {
    <link rel="stylesheet" href="BlazorDemo.ServerSide.styles.css">
} else {
    <link rel="stylesheet" href="BlazorDemo.Wasm.Server.styles.css">
}

@code {
    [Parameter]
    public string InitialThemeName { get; set; }

    DemoTheme PendingTheme { get; set; }

    protected override void OnInitialized() {
        base.OnInitialized();

        Themes.ThemeChangeRequestDispatcher = this;

        if(Themes.ActiveTheme == null)
            Themes.SetActiveThemeByName(InitialThemeName);
        PendingTheme = Themes.ActiveTheme;
    }

    public void RequestThemeChange(DemoTheme newTheme) {
        PendingTheme = newTheme;
        ForceReRender();
    }

    async Task ThemeStylesheet_LoadAsync() {
        if(Themes.ThemeLoadNotifier != null)
            await Themes.ThemeLoadNotifier.NotifyThemeLoadedAsync(PendingTheme);
        PendingTheme = null;
    }

    string GetThemeCssUrl() {
        return PendingTheme != null ? Themes.GetThemeCssUrl(PendingTheme) : Themes.GetActiveThemeCssUrl();
    }

    string GetHighlightJSThemeCssUrl() {
        return PendingTheme != null ? Themes.GetHighlightJSThemeCssUrl(PendingTheme) : Themes.GetActiveHighlightJSThemeCssUrl();
    }

    string GetBootstrapNativeCssUrl() {
        return PendingTheme != null ? Themes.GetBootstrapThemeCssUrl(PendingTheme) : Themes.GetActiveBootstrapThemeCssUrl();
    }

    void ForceReRender() {
        StateHasChanged();
    }

    string[] CreateLinkUrls() {
        return new[] {GetBootstrapNativeCssUrl(), GetThemeCssUrl(), GetHighlightJSThemeCssUrl()};
    }
    
    public void Dispose() {
        Themes.ThemeChangeRequestDispatcher = null;
    }

}
