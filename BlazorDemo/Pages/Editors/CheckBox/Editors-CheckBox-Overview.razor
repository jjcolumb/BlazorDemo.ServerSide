<DemoPageSectionComponent Id="Editors-CheckBox-Overview">
    <div class="cw-320">
        <label class="mb-2 pb-1">Choose your new car options:</label>
        <div class="row">
            <DxCheckBox @bind-Checked="@SelectAllState" CssClass="mb-1 col">
                Select All
            </DxCheckBox>
        </div>
        <div class="row">
            <div style="padding-left: 2.7rem" class="col col-auto">
                    <DxCheckBox @bind-Checked="@Multimedia" CssClass="mb-1">
                        Multimedia
                    </DxCheckBox>
                    <DxCheckBox @bind-Checked="@AirConditioning" CssClass="mb-1">
                        Air conditioning
                    </DxCheckBox>
                    <DxCheckBox @bind-Checked="@ParkingSensors" CssClass="mb-1">
                        Parking camera
                    </DxCheckBox>
                    <DxCheckBox @bind-Checked="@HeatedSeats" CssClass="mb-1">
                        Heated seats
                    </DxCheckBox>
            </div>
            <div class="col">
                <div class="mb-1" style="@GetStyle(Multimedia)">$130</div>
                <div class="mb-1" style="@GetStyle(AirConditioning)">$800</div>
                <div class="mb-1" style="@GetStyle(ParkingSensors)">$400</div>
                <div class="mb-1" style="@GetStyle(HeatedSeats)">$230</div>
            </div>
        </div>
        <div style="margin-top:0.25rem" class="row">
            <div class="col">
                <b class="mt-3">Total price:</b>
            </div>         
            <div class="col" style="@GetStyle(true)">
                <b class="mt-3">$@GetTotalPrice()</b>
            </div>
        </div>
    </div>

    @code{
        CarOptions options = CarOptions.AirConditioning | CarOptions.HeatedSeats;

        bool? SelectAllState {
            get {
                if(options == CarOptions.None)
                    return false;
                if(options == CarOptions.All)
                    return true;
                return null;
            }
            set {
                if(value.HasValue)
                    options = value.Value ? CarOptions.All : CarOptions.None;
            }
        }

        bool AirConditioning {
            get => options.HasFlag(CarOptions.AirConditioning);
            set => SetOption(value, CarOptions.AirConditioning);
        }

        bool Multimedia {
            get => options.HasFlag(CarOptions.Multimedia);
            set => SetOption(value, CarOptions.Multimedia);
        }

        bool ParkingSensors {
            get => options.HasFlag(CarOptions.ParkingSensors);
            set => SetOption(value, CarOptions.ParkingSensors);
        }

        bool HeatedSeats {
            get => options.HasFlag(CarOptions.HeatedSeats);
            set => SetOption(value, CarOptions.HeatedSeats);
        }

        void SetOption(bool value, CarOptions enumValue) {
            if(value)
                options |= enumValue;
            else
                options &= ~enumValue;
        }

        decimal GetTotalPrice() {
            decimal price = 0;
            price += Multimedia ? 130 : 0;
            price += AirConditioning ? 800 : 0;
            price += ParkingSensors ? 400 : 0;
            price += HeatedSeats ? 230 : 0;
            return price;
        }

        string GetStyle(bool selected) {
            return "text-align:right;" + (selected ? "" : "text-decoration:line-through;");
        }


        enum CarOptions {
            None = 0x0,
            AirConditioning = 0x1,
            Multimedia = 0x2,
            ParkingSensors = 0x4,
            HeatedSeats = 0x8,
            All = AirConditioning | Multimedia | ParkingSensors | HeatedSeats
        }

    }
</DemoPageSectionComponent>
