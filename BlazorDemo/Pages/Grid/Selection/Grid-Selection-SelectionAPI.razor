@page "/Grid/Selection/SelectionAPI"
@layout DataProviderAccessArea<INwindDataProvider>

<DemoPageSectionComponent Id="Grid-Selection-SelectionAPI">
    <ChildContentWithParameters Context="Params">
        @inject NwindDataService NwindDataService

        <DxGrid @ref="Grid"
                Data="@Products"
                KeyFieldName="ProductId"
                @bind-SelectedDataItems="@SelectedDataItems"
                CustomizeCellDisplayText="Grid_CustomizeCellDisplayText">
            <Columns>
                <DxGridDataColumn FieldName="ProductName" MinWidth="100" />
                <DxGridDataColumn FieldName="CategoryId" SortMode="GridColumnSortMode.DisplayText" Caption="Category" MinWidth="100" TextAlignment="GridTextAlignment.Left" />
                <DxGridDataColumn FieldName="UnitPrice" DisplayFormat="c" Width="10%" />
                <DxGridDataColumn FieldName="UnitsInStock" Width="10%" />
                <DxGridDataColumn FieldName="QuantityPerUnit" Width="15%" MinWidth="80" />
                <DxGridDataColumn FieldName="Discontinued" Width="10%" MinWidth="90">
                    <CellDisplayTemplate>
                        @if((bool)context.Value) {
                            <span class="grid-icon grid-icon-check"></span>
                        }
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
        <p class="demo-text w-100 mt-2">The number of selected products: <b>@(SelectedDataItems.Count())</b></p>

        @code {
            IEnumerable<Product> Products { get; set; }
            IEnumerable<Category> Categories { get; set; }
            IReadOnlyList<object> SelectedDataItems { get; set; }
            Category SelectedCategory { get; set; }
            IGrid Grid { get; set; }

            protected override async Task OnInitializedAsync() {
                Categories = await NwindDataService.GetCategoriesAsync();
                Products = await NwindDataService.GetProductsAsync();

                SelectedCategory = Categories.FirstOrDefault();
                SelectedDataItems = GetProductsByCategory(Categories.FirstOrDefault()).ToList();
            }
            void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e) {
                if(e.FieldName == "CategoryId") {
                    e.DisplayText = Categories.Where(c => c.CategoryId == (int)e.Value).FirstOrDefault().CategoryName;
                }
            }
            void Select_Click() {
                Grid.SelectDataItems(GetProductsByCategory(SelectedCategory));
            }
            void Deselect_Click() {
                Grid.DeselectDataItems(GetProductsByCategory(SelectedCategory));
            }
            void ClearSelection_Click() {
                Grid.ClearSelection();
            }
            IEnumerable<Product> GetProductsByCategory(Category category) {
                return Products.Where(p => p.CategoryId == category.CategoryId);
            }
        }
    </ChildContentWithParameters>
    <OptionsContent>
        <OptionComboBox Label="Category:" Data="@Categories" TextField="CategoryName" @bind-Value="@SelectedCategory" SmallSpacing="true" CssClass="ow-150" />
        <OptionButtonGroup>
            <OptionButton Text="Select" OnClick="Select_Click" SmallSpacing="true" />
            <OptionButton Text="Deselect" OnClick="Deselect_Click" />
        </OptionButtonGroup>
        <OptionButton Text="Clear Selection" OnClick="ClearSelection_Click" />
    </OptionsContent>
</DemoPageSectionComponent>
