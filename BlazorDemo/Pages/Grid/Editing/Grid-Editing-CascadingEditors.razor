@page "/Grid/EditData/CascadingEditors"
@layout DataProviderAccessArea<INwindDataProvider, IWorldcitiesDataProvider>

<DemoPageSectionComponent Id="Grid-Editing-CascadingEditors">
    @implements IDisposable
    @inject NwindDataService NwindDataService
    @inject WorldcitiesDataService WorldcitiesDataService

    <DxGrid Data="DataSource"
            @ref="Grid"
            PageSize="8"
            ValidationEnabled="false"
            CustomizeEditModel="Grid_CustomizeEditModel"
            EditModelSaving="Grid_EditModelSaving"
            DataItemDeleting="Grid_DataItemDeleting">
        <Columns>
            <DxGridCommandColumn Width="120px" />
            <DxGridDataColumn FieldName="CompanyName" />
            <DxGridDataColumn FieldName="ContactName" />
            <DxGridDataColumn FieldName="ContactTitle" />
            <DxGridDataColumn FieldName="Phone" Width="10%" />
            <DxGridDataColumn FieldName="Country" Width="10%" />
            <DxGridDataColumn FieldName="City" Width="10%" />
        </Columns>
        <EditFormTemplate Context="EditFormContext">
            @{
                var supplier = (Supplier)EditFormContext.EditModel;
            }
            <DxFormLayout ItemSizeMode="SizeMode.Small" CssClass="w-100">
                <DxFormLayoutItem Caption="Company Name:" ColSpanMd="6">
                    <DxTextBox @bind-Text="@supplier.CompanyName" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Contact Name:" ColSpanMd="6">
                    <DxTextBox @bind-Text="@supplier.ContactName" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Contact Title:" ColSpanMd="6">
                    <DxTextBox @bind-Text="@supplier.ContactTitle" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Phone:" ColSpanMd="6">
                    <DxTextBox @bind-Text="@supplier.Phone" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Country:" ColSpanMd="6">
                    <DxComboBox Data="@Countries"
                                NullText="Select Country..."
                                FilteringMode="DataGridFilteringMode.Contains"
                                TextFieldName="CountryName"
                                ValueFieldName="CountryName"
                                Value="@supplier.Country"
                                ValueChanged="(string newCellValue) => {
                                                    supplier.Country = newCellValue;
                                                    supplier.City = null;
                                              }">
                    </DxComboBox>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="City:" ColSpanMd="6">
                    @{
                        var countryId = Countries.Where(c => c.CountryName == supplier.Country).FirstOrDefault()?.CountryId;
                        var cities = Cities.Where(x => x.CountryId == countryId);
                    }
                    <DxComboBox Data="@cities"
                                NullText="Select City..."
                                FilteringMode="DataGridFilteringMode.Contains"
                                @bind-Value="@supplier.City"
                                TextFieldName="CityName"
                                ValueFieldName="CityName">
                    </DxComboBox>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>

    @code {
        IEnumerable<Supplier> DataSource { get; set; }
        IEnumerable<Country> Countries { get; set; }
        IEnumerable<City> Cities { get; set; }
        IGrid Grid { get; set; }
        TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

        protected override async Task OnInitializedAsync() {
            DataSource = await NwindDataService.GetSuppliersEditableAsync();
            Countries = await WorldcitiesDataService.GetCountriesAsync();
            Cities = await WorldcitiesDataService.GetCitiesAsync();
            DataLoadedTcs.TrySetResult(true);
        }
        protected override async Task OnAfterRenderAsync(bool firstRender) {
            if(firstRender) {
                await DataLoadedTcs.Task;
                await Grid.StartEditRowAsync(0);
            }
         }
        void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e) {
            if(e.IsNew) {
                var newSupplier = (Supplier)e.EditModel;
                newSupplier.CompanyName = "DevExpress";
                newSupplier.ContactName = "John Doe";
            }
        }
        async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e) {
            if(e.IsNew)
                await NwindDataService.InsertSupplierAsync((Supplier)e.EditModel);
            else
                await NwindDataService.UpdateSupplierAsync((Supplier)e.DataItem, (Supplier)e.EditModel);
            await UpdateDataAsync();
        }
        async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e) {
            await NwindDataService.RemoveSupplierAsync((Supplier)e.DataItem);
            await UpdateDataAsync();
        }
        async Task UpdateDataAsync() {
            DataSource = await NwindDataService.GetSuppliersEditableAsync();
        }
        public void Dispose() {
            DataLoadedTcs.TrySetCanceled();
        }
    }
</DemoPageSectionComponent>
