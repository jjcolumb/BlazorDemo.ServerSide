@page "/Grid/DataBinding/LargeQueryable"
@layout DataProviderAccessArea<IRentInfoDataProvider>

<DemoPageSectionComponent Id="Grid-DataBinding-LargeQueryable">
    <ChildContentWithParameters Context="Params">
        @inherits OwningComponentBase
        @inject Microsoft.Extensions.Configuration.IConfiguration Configuration

        <DataProviderAccessAreaContainer DataProvider="@RentInfoDataProvider">
            <DxGrid Data="@Data" PageSize="10">
                <Columns>
                    <DxGridDataColumn FieldName="State" Width="5%" />
                    <DxGridDataColumn FieldName="Area" MinWidth="100" />
                    <DxGridDataColumn FieldName="City" Caption="County" MinWidth="100" />
                    <DxGridDataColumn FieldName="Name" Caption="Location" MinWidth="100" />
                    <DxGridDataColumn FieldName="Year" DisplayFormat="0" Width="10%" />
                    <DxGridDataColumn FieldName="Bedrooms" Width="10%" />
                    <DxGridDataColumn FieldName="Population" DisplayFormat="#,0" MinWidth="80" Width="10%" />
                </Columns>
            </DxGrid>
        </DataProviderAccessAreaContainer>
        @code {
            IRentInfoDataProvider RentInfoDataProvider { get; set; }
            RentInfoDataService RentInfoDataService { get; set; }

            object Data { get; set; }

            protected override void OnInitialized() {
                // Refer to https://docs.microsoft.com/dotnet/api/microsoft.aspnetcore.components.owningcomponentbase
                RentInfoDataProvider = ScopedServices.GetRequiredService<IRentInfoDataProvider>();
                RentInfoDataService = ScopedServices.GetRequiredService<RentInfoDataService>();

                var connectionString = ConnectionStringUtils.GetGridLargeDataConnectionString(Configuration);
                if(string.IsNullOrEmpty(connectionString)) return;

                var dataSource = new GridDevExtremeDataSource<AreaRentInfo>(RentInfoDataService.GetAreaRentInfo());
                dataSource.CustomizeLoadOptions = (loadOptions) => {
                    // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
                    // This can make SQL execution plans more efficient.
                    loadOptions.PrimaryKey = new[] { "Oid" };
                    loadOptions.PaginateViaPrimaryKey = true;
                };

                Data = dataSource;
            }
        }
    </ChildContentWithParameters>
</DemoPageSectionComponent>
