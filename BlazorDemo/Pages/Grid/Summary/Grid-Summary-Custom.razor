@page "/Grid/Summary/Custom"
@layout DataProviderAccessArea<INwindDataProvider>

<DemoPageSectionComponent Id="Grid-Summary-Custom">
    <ChildContentWithParameters Context="Params">
        @inject NwindDataService NwindDataService

        <DxGrid @ref="Grid"
                Data="@Data"
                AllowSelectRowByClick="true"
                SelectedDataItems="@SelectedDataItems"
                SelectedDataItemsChanged="Grid_SelectedDataItemsChanged"
                CustomSummary="Grid_CustomSummary"
                CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
                UnboundColumnData="Grid_UnboundColumnData">
            <Columns>
                <DxGridSelectionColumn Width="60px"/>
                <DxGridDataColumn FieldName="CompanyName" MinWidth="100" />
                <DxGridDataColumn FieldName="City" Width="10%" />
                <DxGridDataColumn FieldName="Region" Width="10%" />
                <DxGridDataColumn FieldName="Country" Width="10%" />
                <DxGridDataColumn FieldName="UnitPrice" DisplayFormat="c" Width="10%" />
                <DxGridDataColumn FieldName="Quantity" Width="10%" />
                <DxGridDataColumn FieldName="Total" UnboundType="GridUnboundColumnType.Decimal" DisplayFormat="c" MinWidth="100" Width="15%" />
            </Columns>
            <TotalSummary>
                <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" Name="Custom" FieldName="Total" />
            </TotalSummary>
        </DxGrid>
        
        @code {
            IEnumerable<object> Data { get; set; }
            IReadOnlyList<object> SelectedDataItems { get; set; }
            IGrid Grid { get; set; }

            protected override async Task OnInitializedAsync() {
                var invoices = await NwindDataService.GetInvoicesAsync();
                var customers = await NwindDataService.GetCustomersAsync();
                Data = invoices.OrderBy(i => i.OrderDate).Join(customers, i => i.CustomerId, c => c.CustomerId, (i, c) => {
                    return new {
                        CompanyName = c.CompanyName,
                        City = i.City,
                        Region = i.Region,
                        Country = i.Country,
                        UnitPrice = i.UnitPrice,
                        Quantity = i.Quantity
                    };
                });
                SelectedDataItems = Data.Skip(1).Take(2).ToList();
            }
            void Grid_CustomSummary(GridCustomSummaryEventArgs e) {
                switch(e.SummaryStage) {
                    case GridCustomSummaryStage.Start:
                        e.TotalValue = 0m;
                        break;
                    case GridCustomSummaryStage.Calculate:
                        if(e.Grid.IsDataItemSelected(e.DataItem))
                            e.TotalValue = (decimal)e.TotalValue + (decimal)e.GetRowValue("Total");
                        break;
                }
            }
            void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e) {
                if(e.Item.Name == "Custom")
                    e.DisplayText = string.Format("Sum of Selected: {0:c}", e.Value);
            }
            void Grid_UnboundColumnData(GridUnboundColumnDataEventArgs e) {
                if(e.FieldName == "Total") {
                    var price = (decimal)e.GetRowValue("UnitPrice");
                    var quantity = (short)e.GetRowValue("Quantity");
                    e.Value = price * quantity;
                }
            }
            void Grid_SelectedDataItemsChanged() {
                Grid.RefreshSummary();
            }
        }
    </ChildContentWithParameters>
</DemoPageSectionComponent>

