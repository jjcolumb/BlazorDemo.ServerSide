@page "/ChartDynamicSeries"

<DemoPageSectionComponent Id="Charts-DynamicSeries">
    <ChildContent>
        @inject ISalesInfoDataProvider Sales

        <DxChart @ref="@chart"
                 Data="@chartData"
                 LabelOverlap="ChartLabelOverlap.Hide"
                 Width="100%">

            <DxChartTitle Text="Sales amount, $" />

            <DxChartCommonSeries SummaryMethod="Enumerable.Sum"
                                 NameField="@((SaleInfo s) => s.Date.Year)"
                                 ArgumentField="@((SaleInfo s) => s.City)"
                                 ValueField="@((SaleInfo s) => s.Amount)">
                <SeriesTemplate Context="settings">
                    @if (settings.GroupKey == 2019) {
                        <DxChartLineSeries Name='Last year'
                                           Settings="@settings" />
                    }
                    else {
                        <DxChartBarSeries Settings="@settings">
                            <DxChartSeriesLabel Visible="true" />
                        </DxChartBarSeries>
                    }
                </SeriesTemplate>
            </DxChartCommonSeries>

        </DxChart>
    </ChildContent>

    <OptionsContent>
        <OptionChartExportComponent ExportMethod="@ExportChart"/>
    </OptionsContent>

    @code {
        IEnumerable<SaleInfo> chartData;
        DxChartBase chart;

        async void ExportChart(ChartExportFormat format) {
            await chart?.ExportAsync("DynamicSeriesChart", format);
        }
        protected override async Task OnInitializedAsync() {
            chartData = await Sales.GetSalesAsync();
        }
    }
</DemoPageSectionComponent>
